name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - homolog
      - develop
  pull_request:
    branches:
      - main
      - homolog
      - develop
  workflow_dispatch:

jobs:
  check-flow:
    runs-on: ubuntu-latest
    outputs:
      approved: ${{ steps.validate.outputs.approved }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch Branch Develop
        run: git fetch origin develop

      - name: Verificar Histórico de Merge
        id: validate
        run: |
          BRANCH=$(echo $GITHUB_REF | awk -F'/' '{print $3}')
          echo "Verificando fluxo da branch: $BRANCH"

          if [[ "$BRANCH" == "main" ]]; then
            BASE_BRANCH="homolog"
          elif [[ "$BRANCH" == "homolog" ]]; then
            BASE_BRANCH="develop"
          else
            BASE_BRANCH=""
          fi

          if [[ -n "$BASE_BRANCH" ]]; then
            BASE_COMMIT=$(git merge-base origin/$BASE_BRANCH HEAD)
            LAST_MERGE=$(git log --merges --pretty=format:'%H' -n 1)

            if [[ "$BASE_COMMIT" == "$LAST_MERGE" ]]; then
              echo "A branch $BRANCH está corretamente baseada na última versão de $BASE_BRANCH."
              echo "approved=true" >> $GITHUB_ENV
            else
              echo "Erro: $BRANCH não foi mergeada corretamente a partir de $BASE_BRANCH!"
              exit 1
            fi
          else
            echo "approved=true" >> $GITHUB_ENV
          fi

  require-approval:
    runs-on: ubuntu-latest
    needs: check-flow
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Aguardando Aprovação Manual
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build-develop:
    runs-on: ubuntu-latest
    needs: check-flow
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Environment
        run: echo "Ambiente de Desenvolvimento" # Criado para que a gente possa subir as alterações e verificar possíveis falhas sem impactar.
      - name: Run Build
        run: |
          echo "Executando build para o ambiente de DESENVOLVIMENTO"
          echo "Rodar testes unitários e verificar código"

  build-homolog:
    runs-on: ubuntu-latest
    needs: check-flow
    if: github.ref == 'refs/heads/homolog'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Environment
        run: echo "Ambiente de Homologação" # Criado para que a gente possa testar e só depois, realizar o deploy.

      - name: Run Build
        run: |
          echo "Executando build para o ambiente de HOMOLOGAÇÃO"
          echo "Rodar testes de integração e validação"

  build-main:
    runs-on: ubuntu-latest
    needs: [check-flow, require-approval]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Environment
        run: echo "Ambiente de Produção" # Versão final em PRODUÇÃO -> "Versão da Flávia".
      - name: Run Build
        run: |
          echo "Executando build para o ambiente PRODUTIVO"
          echo "Preparar deploy para produção"
