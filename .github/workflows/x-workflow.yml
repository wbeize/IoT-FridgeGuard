name: Unified Workflow

on:
  push:
    branches:
      - 'feature/**'
      - 'release/**'
      - 'bugfix/**'
      - develop
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  prepare-git:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Configurar Git
        run: |
          echo "Configurando Git..."
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          echo "Configuração do Git concluída."

      - name: Configurar credenciais HTTPS
        run: |
          git config --global credential.helper store
          echo "https://${{ secrets.GITHUB_TOKEN }}:@github.com" > ~/.git-credentials

      - name: Verificar se estamos no diretório correto do repositório
        run: |
          if [ ! -d ".git" ]; then
            echo "Diretório .git não encontrado. Verifique se você está no diretório correto do repositório."
            exit 1
          fi

  setup-git:
    runs-on: ubuntu-latest
    needs: prepare-git
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Obter título do commit mais recente
        id: get_commit_title
        run: echo "commit_title=$(git log -1 --pretty=%B)" >> $GITHUB_ENV

  feature-check:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/feature/')
    needs: setup-git
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v2

      - name: Verifica origem da branch de feature
        run: |
          echo "Verificando origem da branch de feature..."
          git fetch --all
          git checkout develop || git checkout -b develop origin/develop
          DEVELOP_HEAD=$(git rev-parse origin/develop)
          LOCAL_DEVELOP_HEAD=$(git rev-parse develop)
          FEATURE_BASE=$(git merge-base HEAD develop)
          if [ "$FEATURE_BASE" != "$DEVELOP_HEAD" ] && [ "$FEATURE_BASE" != "$LOCAL_DEVELOP_HEAD" ]; then
            echo "Branches de feature devem ser criadas a partir de develop ou origin/develop."
            exit 1
          else
            echo "Branch de feature criada corretamente a partir de develop ou origin/develop."
          fi

#      - name: Fetch origin branches
#        run: |
#          git fetch --all
#          if [ -z "${{ github.head_ref }}" ]; then
#            echo "Branch name is empty. Please check the branch name."
#            exit 1
#          fi
#          git checkout develop || git checkout -b develop origin/develop

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'Criando Pull Request para a feature branch'
          branch: ${{ github.ref_name }}    # utilizando nome da branch dinamicamente
          base: 'develop'
          title: 'Pull Request para a feature branch'
          body: |
            Este pull request inclui as seguintes alterações:
            - Atualizações na feature branch
          draft: false

      - name: Exibir link do Pull Request
        run: |
          echo "Link do Pull Request: ${{ steps.create-pull-request.outputs.pull-request-url }}"

      - name: Restaurar configuração do Git
        run: |
          git config --global --unset credential.helper
          echo "Configuração do Git restaurada."

  create-release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && startsWith(github.head_ref, 'release/')
    needs: feature-check
    steps:
      - name: Cache das tags do Git
        uses: actions/cache@v3
        with:
          path: |
            ~/.git-refs
          key: ${{ runner.os }}-git-${{ hashFiles('**/refs/tags') }}
          restore-keys: |
            ${{ runner.os }}-git-

      - name: Incrementar versão
        id: bump_version
        run: |
          cd ${{ github.workspace }}
          echo "Buscando todas as tags..."
          git fetch --tags
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null)
          if [ -z "$latest_tag" ]; then
            new_version="v1.0.0"
            echo "Nenhuma tag encontrada. Definindo nova versão como v1.0.0"
          else
            new_version=$(echo $latest_tag | awk -F. -v OFS=. '{$NF++;print}')
            echo "Última tag encontrada: $latest_tag. Nova versão: $new_version"
          fi
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Cria tag com a nova versão
        run: |
          cd ${{ github.workspace }}
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}

      - name: Cria branch release
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          if [ -z "$latest_tag" ]; then
            new_version="v1.0.0"
          else
            new_version=$(echo $latest_tag | awk -F. -v OFS=. '{$NF++;print}')
          fi
          git checkout -b release/$new_version
          git push origin release/$new_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'Criando Pull Request para a release branch'
          branch: release/${{ env.new_version }}
          base: 'main'
          title: 'Pull Request para a release branch'
          body: |
            Este pull request inclui as seguintes alterações:
            - Atualizações na release branch
          draft: false

      - name: Exibir link do Pull Request
        run: |
          echo "Link do Pull Request: ${{ steps.create-pull-request.outputs.pull-request-url }}"

      - name: Restaurar configuração do Git
        run: |
          git config --global --unset credential.helper
          echo "Configuração do Git restaurada."

  auto-pr:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/feature/') || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/origin/develop' || startsWith(github.ref, 'refs/heads/release/')
    permissions:
      contents: write
      pull-requests: write
    needs: [prepare-git, setup-git, feature-check, create-release]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configurar credenciais HTTPS
        run: |
          git config --global credential.helper store
          echo "https://${{ secrets.GITHUB_TOKEN }}:@github.com" > ~/.git-credentials

      - name: Make changes to pull request
        run: date +%s > report.txt

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: Update report
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
          signoff: false
          title: '[Example] Update report'
          body: |
            Update report
            - Updated with *today's* date
            - Auto-generated by [create-pull-request][1]

            [1]: https://github.com/peter-evans/create-pull-request
          labels: |
            release
            automated pr
          assignees: retepsnave
          reviewers: retepsnave
          milestone: 1
          draft: false
          delete-branch: true

      - name: Check output
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"

      - name: Add reaction
        uses: peter-evans/create-or-update-comment@v4
        with:
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          reaction-type: hooray

      - name: Restaurar configuração do Git
        run: |
          git config --global --unset credential.helper
          echo "Configuração do Git restaurada."
